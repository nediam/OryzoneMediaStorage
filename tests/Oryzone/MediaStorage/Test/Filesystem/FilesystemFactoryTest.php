<?php
namespace Oryzone\MediaStorage\Test\Filesystem;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Oryzone\MediaStorage\Filesystem\FilesystemFactory;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-06 at 10:40:39.
 */
class FilesystemFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var FilesystemFactory
     */
    protected $factory;

    protected $default;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $adapter = $this->getMock('\League\Flysystem\Adapter\NullAdapter');
        $this->default = $this->getMock('\League\Flysystem\Filesystem', array(), array($adapter));
        $map = array(
            'default' => $this->default,
            'invalid' => 'foo'
        );
        $this->factory = new FilesystemFactory($map);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGet()
    {
        $filesystem = $this->factory->get('default');
        $this->assertEquals($this->default, $filesystem);
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGetException0()
    {
        // undefined filesystem
        $this->factory->get('undefined');
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidConfigurationException
     */
    public function testGetException1()
    {
        // invalid filesystem definition
        $this->factory->get('invalid');
    }

    public function testGetIterator()
    {
        $iterator = $this->factory->getIterator();
        $this->assertTrue( ($iterator instanceof \ArrayIterator) );
    }
}
