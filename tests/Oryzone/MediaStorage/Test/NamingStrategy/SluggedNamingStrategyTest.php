<?php
namespace Oryzone\MediaStorage\Test\NamingStrategy;

/*
 * This file is part of the Oryzone/MediaStorage package.
 *
 * (c) Luciano Mammino <lmammino@oryzone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Oryzone\MediaStorage\NamingStrategy\SluggedNamingStrategy;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-07 at 06:46:59.
 */
class SluggedNamingStrategyTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SluggedNamingStrategy
     */
    protected $strategy;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->strategy = new SluggedNamingStrategy();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGenerateName()
    {
        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
              ->method('getName')
              ->will($this->returnValue('foo'));
        $variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $variant->expects($this->any())
                ->method('getName')
                ->will($this->returnValue('default'));
        $filesystem = $this->getMock('\League\Flysystem\Filesystem', array(), array(), '', FALSE);
        $this->assertRegExp('/^foo-(\w+)_default$/', $this->strategy->generateName($media, $variant, $filesystem));
    }

    /**
     * @expectedException \Oryzone\MediaStorage\Exception\InvalidArgumentException
     */
    public function testGenerateNameException()
    {
        //media has no name
        $media = $this->getMock('\Oryzone\MediaStorage\Model\MediaInterface');
        $media->expects($this->any())
            ->method('getName')
            ->will($this->returnValue(''));
        $variant = $this->getMock('\Oryzone\MediaStorage\Variant\VariantInterface');
        $filesystem = $this->getMock('\League\Flysystem\Filesystem', array(), array(), '', FALSE);
        $this->strategy->generateName($media, $variant, $filesystem);
    }
}
